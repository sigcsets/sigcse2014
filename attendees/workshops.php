<?php
 $title = "Workshops [SIGCSE 2014]";
 $nav_menu = "workshops";
 include("../parts/top.php");
?>

<?php 
  include("../parts/middle.php"); 
?>

<div class="row-fluid">
 <div class="span12" style="text-align: center" id="about"><h2 class="section">SIGCSE 2014 Workshops</h2></div>
</div>

<div class="row-fluid">
 <div class="row-fluid">
 	<div class="span12">

<table dir='ltr' border=0 cellpadding=0 cellspacing=0 class='tblGenFixed' id='tblMain'><tr class='rShim'><td class='rShim' style='width:0;'><td class='rShim' style='width:21px;'><td class='rShim' style='width:43px;'><td class='rShim' style='width:135px;'><td class='rShim' style='width:93px;'><td class='rShim' style='width:138px;'><td class='rShim' style='width:649px;'><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s0'>#<td  dir='ltr' class='s1'>DAY<td  dir='ltr' class='s2'>TITLE<td  dir='ltr' class='s2'>NAME<td  dir='ltr' class='s2'>EMAIL<td  dir='ltr' class='s2'>ABSTRACT</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>1<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>ITSEED: Hands-on Labs for IT Security Education<td  dir='ltr' class='s5'>Yan Bai<td  dir='ltr' class='s5'>yanb@uw.edu<td  dir='ltr' class='s5'>With NSF funding, we have developed a collection of instructional laboratories to enhance the security component in IT education. The labs are developed with a layered and modular design that can be tailored for different courses, accommodating new tools and being conducted in various environments with minimum modifications. This workshop introduces to participants these labs and the environment to conduct them. The workshop proceeds in four sessions in which we: 1) introduce the labs, techniques and environment; 2) demonstrate a lab; 3) guide participants to practice with a lab, 4) debrief. The intended audience is educators who teach IT security courses or other courses with security components at colleges or universities. Experience is not required. <br/>Each participant receives an electronic version of 1) the lab assignments that we have developed and used in our teaching practice, and 2) preconfigured virtual machines and tools used to conduct the labs.<br/>Laptop required.<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>2<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Making Games and Apps in Introductory Computer Science<td  dir='ltr' class='s5'>Tiffany Barnes<td  dir='ltr' class='s5'>tmbarnes@ncsu.edu<td  dir='ltr' class='s5'>The new CS Principles curriculum, a pilot Advanced Placement course, offers novice students an exciting opportunity to learn computing in a hands-on, fun way. High school and college teachers of introductory computer science course are invited to this workshop to learn basic game and mobile phone development. Participants will learn GameMaker, AppInventor, and Touch Develop. These tools allow students to create and have fun with computing while teaching object-oriented and event-driven programming and game architectures. Participants should bring their own laptops (ideally with AppInventor installed). Windows 7 phones will be provided during the workshop. We will provide links to curricular modules for the CS Principles: Beauty and Joy of Computing course.<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>3<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Reviewing NSF Proposals: Learn about Effective Proposal Writing via the Review Process<td  dir='ltr' class='s5'>Paul Tymann<td  dir='ltr' class='s5'>ptymann@nsf.gov<td  dir='ltr' class='s5'>This workshop focuses on the NSF proposal review process.  Via close examination of the review process, participants gain an understanding of how to write good reviews and how to improve their own proposal writing. The workshop covers the following topic areas: the proposal review process from submission of a proposal to award or decline; elements of a good review; NSF merit criteria (intellectual merit and broader impacts); elements of a good proposal; and how to volunteer to review proposals.<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>4<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Integrating Software Testing into Programming Courses (WISTPC 2014)<td  dir='ltr' class='s5'>Peter Clarke<td  dir='ltr' class='s5'>clarkep@cis.fiu.edu<td  dir='ltr' class='s5'>The WISTPC workshop introduces participants to a minimally intrusive approach to integrating software testing into software engineering and advance programming courses using a cyberlearning environment. The focus of the workshop will be to introduce participants to (1) software testing techniques, and (2) the features of WReSTT ‚Äì Web-Based Repository of Software Testing Tutorials, that supports testing in the classroom. WReSTT integrates aspects of collaborative learning and social networking to improve students‚Äô ability to learn software testing techniques and testing tools. We expect participants to know Java and we assume they have little or no formal training in software testing.  At the end of the workshop participants should: (1) have a basic understanding of software testing and testing tools, (2) be able to use WReSTT in their classes, and (3) be able to use learning objects to support software testing instruction.  URL: http://wrestt.cis.fiu.edu/cen/wistpc-14  Laptop Required ‚Äì a web browser and wifi enabled.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>5<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Teaching Computing with the IPython Notebook<td  dir='ltr' class='s5'>Greg Wilson<td  dir='ltr' class='s5'>greg@mozillafoundation.org<td  dir='ltr' class='s5'>The IPython Notebook is an interactive browser-based environment where you can combine code execution, text, mathematics, plots, and rich media into a single document. Originally designed for use as an electronic lab notebook for computational science, it is increasingly being used in teaching as well, and a rich ecosystem of open source plugins and extensions for teaching is growing around it. The first half of this hands-on workshop will introduce the Notebook and present examples of lessons and instructional materials built around it. In the second half, attendees will explore future directions for the Notebook as a teaching platform.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>6<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Teaching Service-Oriented Programming to CS and SE Undergraduate Students<td  dir='ltr' class='s5'>Xumin Liu<td  dir='ltr' class='s5'>xl@cs.rit.edu<td  dir='ltr' class='s5'>Service-Oriented Programming (SOP) is a relatively new programming paradigm that supports the development of new software applications using existing web services as building blocks. SOP has gained significant popularity in industry as it increases software reuse and productivity. As the SOP paradigm can improve modern software development, the presenters have created a course-module based approach for incorporating SOP into Computer Science (CS) and Software Engineering (SE) curricula; a course module is a distinct, self-contained curricular unit such as a lab or teaching component that an instructor may incorporate into an existing course, typically without requiring formal curricular approval. The workshop presenters have developed SOP course modules for inclusion in standard CS and SE courses.: There is an introductory SOP module for a course such as Computer Science 2, a mid-level SOP module for a course such as Programming Language Concepts, and a more advanced module for a course such as Software Engineering or Web Services. These developed course modules have been used in courses in three universities and have been improved based on those experiences. Based on these experiences, this workshop will present basic concepts and techniques of SOP and describe how the course-module approach toward SOP can be adapted for the participants‚Äô own teaching.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>7<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>GENI as a Virtual Laboratory for Networking and Distributed Systems Classes<td  dir='ltr' class='s5'>Vicraj Thomas<td  dir='ltr' class='s5'>vthomas@bbn.com<td  dir='ltr' class='s5'>This hands-on workshop will introduce GENI to instructors of computer networking and distributed systems classes.  Instructors can use GENI [http://groups.geni.net/geni/wiki], an easy-to-use virtual laboratory, to improve the educational experiences of their students by having them experiment with new concepts without requiring expensive laboratory facilities.<br/><br/>GENI is funded by the National Science Foundation and is free to use for research and education. It has been used by over twenty graduate and undergraduate classes.<br/><br/>Participants will have the opportunity to set up and run experiments using GENI.  They will also learn about class logistics when using GENI and support resources such as ready-to-use exercises. Those doing the hands-on activity will need a laptop  running relatively recent versions of Mac OS, Windows or Linux;  at least 4GB of memory; a modern processor (at least dual core and faster than 1.5 GHz) and a WiFi interface.  <br/><br/>Tutorial URL: http://groups.geni.net/geni/wiki/Tutorials/SIGCSE14.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>8<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>CABECT: Collaborating Across Boundaries to Engage Undergraduates in Computational Thinking<td  dir='ltr' class='s5'>S. Monisha Pulimood<td  dir='ltr' class='s5'>pulimood@tcnj.edu<td  dir='ltr' class='s5'>Innovative solutions for complex problems entail diversity of perspectives, and students must learn to integrate concepts from multiple disciplinary areas. Yet, to provide collaborative experiences that cross disciplinary boundaries, educators must navigate numerous administrative and pedagogical challenges. In this hands-on workshop participants will learn how to leverage existing courses for students and faculty to collaborate across disciplines and with a community partner, to develop socially-relevant computational solutions for real-world problems. Participants will also brainstorm ideas on addressing specific challenges at their own institutions. The intended audience is educators interested in engaging their students in deep computational thinking through immersive multidisciplinary collaborative experiences. Registered participants will be reimbursed the workshop registration fee through NSF Award# 1141170. We will additionally offer a stipend to participants who adopt our model, administer assessments and provide us with their results for analysis and inclusion in reports. More information will be available at http://tardis.tcnj.edu/cabect/. Laptop Recommended.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>9<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Enhancing Computer Science Education (CSE) with the Use of 3D Printer Technology<td  dir='ltr' class='s5'>Robert Lutz<td  dir='ltr' class='s5'>rlutz@ggc.edu<td  dir='ltr' class='s5'>This workshop provides an introduction to three-dimensional (3D) printing. This tutorial will: cover the general background of 3D printing, summarize popular software tools, describe associated challenges and offer suggestions for application within computer science (CS) coursework. Participating CSE educators will get hands-on experience with 3D printing tools and will be able to print a limited number of items during the workshop. Attendees will perform a full lifecycle exercise in the printing workflow, progressing from a concept, to a digital model, to a physical implementation. The workshop will also describe the authors‚Äô experience integrating this authentic learning into several IT and CS courses. Experience gained will be useful after the session in both printer and printer-less environments. See http://tinyurl.com/k65jxsm for more information. Laptop required.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>10<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Scala for Introductory CS and Parallelism<td  dir='ltr' class='s5'>Mark Lewis<td  dir='ltr' class='s5'>mlewis@trinity.edu<td  dir='ltr' class='s5'>Scala is one of a new breed of hybrid languages with both object-oriented and functional aspects. It happens to be the most successful of these languages coming in at #12 on the Red Monk language ranking and leading all languages in their 2nd tier. This workshop will introduce participants to the Scala programming language, how it can be used effectively in introductory CS courses, and the parallel tools that are available for it. We begin with simple examples in the REPL and scripting environment, then look at doing larger, object-oriented projects. We finish off with an exploration of composable futures and the Akka actor library.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>11<td  dir='ltr' class='s4'>WED<td  dir='ltr' class='s5'>Teach Algorithm Design and Intractability with a Project-Based Curriculum Centered on a Single Intractable Problem: Three Domains to Choose From<td  dir='ltr' class='s5'>Andrea F. Lobo<td  dir='ltr' class='s5'>lobo@rowan.edu<td  dir='ltr' class='s5'>This workshop presents an award-winning, NSF-funded, project-based curriculum for algorithm design that includes algorithmic strategies for intractable problems. This curriculum is a sequence of laboratory projects comprising increasingly sophisticated solvers for a single intractable problem, designed to integrate into existing, one-term, undergraduate courses that teach algorithm design and/or intractability without sacrificing traditional course content. The presenters have used the curriculum in the Design and Analysis of Algorithms course at their institution to help students tackle and appreciate intractability. This workshop presents versions of the curriculum centered on TSP, SAT and Sudoku. Attendees will receive adoption materials and access to an adopters forum. NSF is funding the development, evaluation, dissemination and adoption of the curriculum, and potential adopters are encouraged to apply for funding to attend this workshop and SIGCSE 2014 at http://www.rowan.edu/~lobo/AlgosCurriculum. This material is based upon work supported by the National Science Foundation under Grant No. 1140753. Laptop optional</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>12<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Exploring Computer Science: Computational Practices in Action<td  dir='ltr' class='s5'>Gail Chapman<td  dir='ltr' class='s5'>chapgail@gmail.com<td  dir='ltr' class='s5'>The ECS program includes an inquiry-based college-preparatory curriculum that introduces students to the creative nature of computing, technology as a tool for solving problems, and the relevance and impact of CS.  This workshop will provide participants the opportunity to engage in activities from the ECS curriculum that highlight the six computational practices common to ECS and CS Principles. We will explicitly model the inquiry-based design of the activities and facilitate discussions that highlight how inquiry manifests itself in the computational practices. This workshop is appropriate for K-12 educators and college/university faculty who are interested in deepening their understanding of how teacher pedagogy is critical to broadening participation in computing. Laptop Optional.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>13<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Teaching Shared Memory Parallel Concepts with OpenMP<td  dir='ltr' class='s5'>Joel Adams<td  dir='ltr' class='s5'>adams@calvin.edu<td  dir='ltr' class='s5'>Curriculum 2013 brings parallelism into the CS curricular mainstream. This hands-on workshop is intended for faculty with little or no background in parallel computing.  OpenMP is a platform independent, industry-standard library for shared-memory parallel programming supported by all modern C and C++ compilers. The workshop introduces the basics of OpenMP multithreading using parallel patterns, including single program multiple data (SPMD) execution, fork-join threading, and pragmas for parallel for loops, parallel blocks, mutual exclusion, etc. The workshop includes: (i) an overview of OpenMP, (ii) self-paced hands-on experimentation with the OpenMP programs, and (iii) a discussion of how these may be used to achieve the goals of Curriculum 2013. Workshop materials will be distributed from csinparallel.org.  Participants will receive and explore 15 short programs designed to help students understand multithreading concepts, plus longer programs that use OpenMP to solve significant problems. A participant may explore these programs on their own laptop, provided it has installed a C/C++ compiler that supports OpenMP (e.g., gcc 4.2 or later; Visual Studio 2008 or later).  Those comfortable with the commandline may explore the programs on our remote servers using a laptop or tablet with a suitable SSH client.  Laptop recommended.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>14<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Creating Stimulating, Relevant, and Manageable Introductory Computer Science Projects that Utilize Real-Time Web-Based Data<td  dir='ltr' class='s5'>Eli Tilevich<td  dir='ltr' class='s5'>tilevich@cs.vt.edu<td  dir='ltr' class='s5'>This workshop introduces participants to RealTimeWeb, <br/>a software architecture framework that makes real-time web data, such as weather reports, news updates, and restaurant recommendations, accessible for introductory programming projects. The presented technology offers technical scaffolding for the students to gradually ease into (or completely circumvent if appropriate) some of the most vexing complexities of distributed computing. At the heart of RealTimeWeb are carefully engineered client libraries through which students can access the data provided by real-time web services. To support computing educators teaching introductory CS classes in a variety of programming languages, each library is available in Python, Java, and Racket, with compatibility on key platforms, including Android. These libraries are readily available through an online curated gallery, designed to be quickly adapted to instructors‚Äô specific academic needs. This gallery also provides a tool for rapidly prototyping new libraries based on our framework. RealTimeWeb enables computing educators to introduce important real-time distributed computing concepts without overwhelming students with the low-level details that working with such data typically requires.<br/><br/>This workshop introduces RealTimeWeb via a hands-on approach by introducing participants to the core functionality of our architectural framework and client libraries. The workshop proceeds in three parts in which we: (1) present RealTimeWeb by working through a case study of creating a programming project in a typical CS 2 course; (2) demonstrate how the framework can be used to rapidly prototype a new library of the participants‚Äô choice; and (2) critically discuss the technology in small and large groups.<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>15<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Computational Music Remixing with EarSketch<td  dir='ltr' class='s5'>Brian Magerko<td  dir='ltr' class='s5'>magerko@gatech.edu<td  dir='ltr' class='s5'>EarSketch (earsketch.gatech.edu) is an integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. Attendees will use Python to place audio clips, create rhythms, and add and control effects to a multi-track digital audio workstation (DAW) while learning computing concepts such as variables, iteration, conditionals, strings, lists, and functions. Participants write code to make music, with a focus on popular genres such as hip hop. The agenda outlines the pedagogy of connecting musical expression to computation. EarSketch has been used in introductory computing summer camps and academic courses and works well with CS Principles. It is currently being used in a 21,000-student MOOC.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>16<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Scratch + Xbox Kinect: A Magical Combination for Outreach<td  dir='ltr' class='s5'>Victor Norman<td  dir='ltr' class='s5'>vtn2@calvin.edu<td  dir='ltr' class='s5'>Participants will learn how to install Scratch, the Xbox Kinect libraries, and the software that integrates the two.  The participant will then practice basic Scratch programming, and then learn how to program Scratch when connected to an Xbox Kinect.  Five programming challenges will be given to participants, ranging from easy to difficult.  During these activities, the participants will experience the excitement of using their bodies (instead of a mouse and keyboard) as the program controller. Discussions will be held to think about human-computer interactions, standard interaction models, etc., as well as how to help students engage more deeply with computer programming activities. Participants will work in teams of 3 or 4 using participant-supplied laptops running Windows 7.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>17<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>The Absolute Beginner&#39;s Guide to JUnit in the Classroom<td  dir='ltr' class='s5'>Stephen Edwards<td  dir='ltr' class='s5'>edwards@cs.vt.edu<td  dir='ltr' class='s5'>Software testing has become popular in introductory courses, but many educators are unfamiliar with how to write software tests or how they might be used in the classroom.  This workshop provides a practical introduction to JUnit for educators.  JUnit is the Java testing framework that is most commonly used in the classroom.  Participants will learn how to write and run JUnit test cases; how-to‚Äôs for common classroom uses (as a behavioral addition to an assignment specification, as part of manual grading, as part of automated grading, as a student-written activity, etc.); and common solutions to tricky classroom problems (testing standard input/output, randomness, main programs, assignments with lots of design freedom, assertions, and code that calls exit()).</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>18<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Teaching with HFOSS to Provide Students with Real World Experience: An Introduction<td  dir='ltr' class='s5'>Darci Burdge<td  dir='ltr' class='s5'>darci.burdge@ncc.edu<td  dir='ltr' class='s5'>Have you ever wanted your students to contribute to or learn from a real-world software project that benefits society? Want some help getting started? Many students find involvement in Humanitarian Free and Open Source Software (HFOSS) projects engaging and motivating. As a first step, this workshop will introduce faculty to FOSS tools and culture. Through a virtual field trip into the world of HFOSS you will learn how to find a project, discern characteristics of a good project for student participation and understand how to use IRC, a communication tool used by FOSS developers. The use of version control to support project development will also be discussed. Additional information at:  http://www.foss2serve.org/index.php/SIGCSE_2014_Workshop. Laptop required.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>19<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Guiding Students to Discover CS Concepts and Develop Process Skills using POGIL<td  dir='ltr' class='s5'>Clifton Kussmaul<td  dir='ltr' class='s5'>kussmaul@muhlenberg.edu<td  dir='ltr' class='s5'>This workshop is for anyone who teaches CS, and introduces process-oriented guided inquiry learning (POGIL) in computer science. In a POGIL classroom, teams of 3-5 learners work on instructor-facilitated activities. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and meta-cognition, learners develop process skills and individual responsibility. Studies show that POGIL can significantly improve student performance. Workshop participants will experience POGIL activities, learn core practices, and draft activity pieces. POGIL materials for a variety of CS concepts will be shared. More information is available at http://cspogil.org, including sample activities for CS1, CS2, and other courses. Laptops optional.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>20<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Mobile Computational Thinking with App Inventor 2<td  dir='ltr' class='s5'>Franklyn Turbak<td  dir='ltr' class='s5'>fturbak@wellesley.edu<td  dir='ltr' class='s5'>Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (e.g., local variables) and browser-based blocks editing. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. All of the pedagogical materials presented in the workshop, as well as all of the materials used by the workshop presenters in their individual courses, are posted on the Web and are available to everyone under a Creative Commons license. A laptop is required for this workshop. Each participant will be provided with an Android mobile device to use during the workshop. Participants who have their own Android phones or tablets can use them if they choose. This workshop is based upon work supported by the National Science Foundation under Grant Numbers 1225680, 1225719, 1225745, 1225976, and 1226216.<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>21<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Using the New Lego MindStorms EV3 Robotics Platform in CS Courses<td  dir='ltr' class='s5'>Ben Schafer<td  dir='ltr' class='s5'>schafer@cs.uni.edu<td  dir='ltr' class='s5'>This workshop will conduct an exploration of the newly released Lego Mindstorms EV3 robot platform and its applicability to the college computer science curriculum. Participants will learn about the EV3 through handouts and hands-on programming exercises.  The first part of the workshop will focus on demonstrating EV3 robots as well as the STEM concepts and computing concepts they illustrate.   The second part of the workshop will focus in on the new capabilities of the EV3.  This workshop will be more detailed than the vendor led workshop.  It will be of benefit to participants new to Mindstorms robotics as well as those with NXT/RCX experience who want to see the evolution of the platform and new components featured in the EV3.  These include a revision of the controller brick hardware and software, new color and gyroscopic sensors, and increased processing and memory capabilities.  The organizers have a combined 20 years of experience using Mindstorms in CS courses (including courses in introductory programming, systems, and artificial intelligence) with Lego and third party programming environments. Participants must bring a Bluetooth-capable laptop (Mac or Windows), and will have a robot, software, and kit to use for the workshop.  Participants will receive a promotion code to purchase a 10% discounted Mindstorms kit.<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>22<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>AP CS Principles and The Beauty and Joy of Computing Curriculum<td  dir='ltr' class='s5'>Daniel D. Garcia<td  dir='ltr' class='s5'>ddgarcia@CS.Berkeley.EDU<td  dir='ltr' class='s5'>The Beauty and Joy of Computing (BJC) is an introductory computer science curriculum developed at UC Berkeley (and adapted at the University of North Carolina, Charlotte), intended for high school juniors through university non-majors.  It was used in two of the five initial pilot programs for the AP CS Principles course being developed by the College Board and the National Science Foundation.  Our overall goal is to support the CS10K project by preparing instructors to teach the AP CS Principles course through the BJC curriculum.  In this workshop, we will share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of NSF-funded summer professional development opportunities.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>23<td  dir='ltr' class='s4'>FRI<td  dir='ltr' class='s5'>Hands-on Cybersecurity Exercises in the EDURange Framework<td  dir='ltr' class='s5'>Richard Weiss<td  dir='ltr' class='s5'>weissr@evergreen.edu<td  dir='ltr' class='s5'>Cybersecurity is a topic of growing interest for CS educators. The goal of this workshop is to provide faculty with tools and interactive exercises that would facilitate adding this topic to their curriculum. We will introduce the EDURange framework for developing interactive cybersecurity exercises.  We have several exercises for participants to try, including network scanning and firewall configuration. We will give an introduction to some tools such as nmap, as well as the basic concepts.  We have tested our framework several times in our classrooms and workshops. One of its advantages is that faculty can use it in their classes with very little set-up. It uses Amazon&#39;s EC2 to make the exercises readily available, so instructors will be able to access them once they get an account. We will also discuss other security exercises, including ones in the RAVE. It also provides each user with a number of VMs with tools and vulnerabilities. We will discuss using exercises as assessment tools.  No previous experience in security is necessary. Laptop required.  http://blogs.evergreen.edu/edurange</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>24<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Server-side Web Development with JavaScript and Node.js<td  dir='ltr' class='s5'>Ariel Ortiz<td  dir='ltr' class='s5'>ariel.ortiz@itesm.mx<td  dir='ltr' class='s5'>Node.js is one of the hottest open source web platforms currently available. It&#39;s built on Google Chrome&#39;s V8 JavaScript runtime engine and it allows you to write all kinds of network applications and servers in just a few lines of code. Node.js uses an asynchronous programming model built on non-blocking I/O and a single-threaded event loop. What this means, basically, is that you don&#39;t need to be concerned with awful race conditions or synchronization issues that arise when programming for a concurrent multi-user environment. This workshop is aimed mainly at web development instructors that would like to consider teaching a single programming language, JavaScript, for both client-side and server-side coding. Participants will learn how to employ Node.js on Windows, Mac OS or Linux in order to write scalable web servers and applications. Additionally, the Express web framework will be introduced in order to demonstrate how to quickly program traditional webapps and single-page applications (SPA) with the aid of jQuery, AJAX and RESTful web services. The resulting programs will be usable from any modern web browser, including those found in desktop and laptop computers, and mobile devices such as tablets and smart-phones.  Participants should have prior working knowledge of client-side (running on a browser) JavaScript and HTML. More information: http://node.arielortiz.info/ Laptop Required.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>25<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Artbotics with Lego Mindstorms<td  dir='ltr' class='s5'>Adam Norton<td  dir='ltr' class='s5'>anorton@cs.uml.edu<td  dir='ltr' class='s5'>This workshop introduces participants to the Artbotics program, which combines art and robotics to teach students about computer science while creating kinetic, interactive sculptures. The Lego Mindstorms NXT platform will be used to create two projects during the workshop: a spirograph-like drawing produced by programming a car to drive using a sequence of motor movements (teaching the need for looping in programming; examples can be seen here: http://www.youtube.com/watch?v=8wl1eFG31bo and http://www.youtube.com/watch?v=SNn3eeZjiO4) and an interactive, kinetic sculpture that reacts to sensor input (teaching the need for decisions in programming; examples can be seen here: http://www.youtube.com/watch?v=_CAXAY6FYSc). We will be providing laptops, Lego Mindstorms NXT kits, and all building materials. More information is available on artbotics.org/lego<br/><br/>Participants are not required to have any previous experience with Lego Mindstorms, robotics, or computer science. Laptop Optional</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>26<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Using the AP CS Labs in the Classroom<td  dir='ltr' class='s5'>Paul Tymann<td  dir='ltr' class='s5'>paul.tymann@rit.edu<td  dir='ltr' class='s5'>The Advanced Placement (AP) Computer Science (CS) A Development Committee is replacing the large case study (GridWorld) with a hands-on structured lab component with the following characteristics:<br/><br/>‚Ä¢ At least three labs explore computing in context at a significant level, building upon supplied code that provides examples of good style and appropriate use of programming language constructs<br/>‚Ä¢ Each lab contains a significant problem-solving component in which students study alternative approaches for solving a problem, solve new problems, or modify existing code to solve altered problem.<br/>‚Ä¢ At least one lab provides students with experience working with programs involving multiple interactive classes and may involve decomposing a program into classes and using inheritance, interfaces, and other object-oriented concepts as identified in the AP Computer Science A topic outline.<br/>‚Ä¢ Collectively, lab experiences will cover at least 80% of the topics listed in the course description and will involve at least 20 hours of class time.<br/><br/>In investigating the use of labs, the AP CS A program developed three labs that cover many introductory topics and may be used at various times throughout a course.  Since these labs cover many basic concepts and perspectives, the labs are appropriate for both AP CS A courses and many college CS1 courses.  This workshop will introduce teachers to the AP CS A lab materials and provide practical experience in using these materials within introductory courses.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>27<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Learn Java in N Games<td  dir='ltr' class='s5'>Peter Drake<td  dir='ltr' class='s5'>drake@lclark.edu<td  dir='ltr' class='s5'>The Learn Java in N Games project (ljing.org) aims to teach topics in CS1, CS2, and other courses by having students implement a variety of games. Each game is presented as a stand-alone module, easily incorporated into an existing course without committing to major curricular changes. Modules include unusually clear solution code, skeleton code for students to complete, JUnit tests for quick feedback to students and automated grading, and clear assignment statements with learning objectives. Program code strictly separates game logic from graphic user interfaces (GUIs), allowing the same code to be used in both conventional and mobile Android environments. In this three-hour tutorial, participants will complete two assignments. These assignments are ready to be used in classes the next day. Laptop required.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>28<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Chapel: A versatile tool for teaching undergraduates parallel programming<td  dir='ltr' class='s5'>David Bunde<td  dir='ltr' class='s5'>dbunde@knox.edu<td  dir='ltr' class='s5'>Chapel is a programming language being developed for high-performance applications. It is well-suited for teaching parallelism in a wide variety of undergrad courses. Chapel is easy to learn since it supports a low-overhead style like a scripting language as well as a full OO style. It is concise, needing a single keyword to launch an asynchronous task, run a parallel loop, or perform a reduction. This helps undergrads focus on the main point of examples and lets them quickly try different parallel algorithms. It is also versatile, usable on both multicore systems and clusters. In this workshop, attendees will learn basics of Chapel, complete hands-on exercises, and see possible uses in algorithms, programming languages, and parallel programming courses. Laptop with SSH client required.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>29<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Introduction to analysing the BlueJ Blackbox data<td  dir='ltr' class='s5'>Neil Brown<td  dir='ltr' class='s5'>nccb@kent.ac.uk<td  dir='ltr' class='s5'>The Blackbox project, launched in 2013, collects data about beginner student behaviour in BlueJ. Computing education  researchers may already apply for permanent access to the  data. This workshop will describe what data is available and show interested researchers in detail how to get started with analysing the Blackbox data. This session will be hands-on, and participants should bring a network-capable laptop (or similar) that is capable of running an SSH terminal (e.g. Mac OS X, Linux, or PuTTY on Windows).<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>30<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Introducing Secure Coding in CS0, CS1, and CS2<td  dir='ltr' class='s5'>Siddharth Kaza<td  dir='ltr' class='s5'>skaza@towson.edu<td  dir='ltr' class='s5'>The CS 2013 curriculum includes Information Assurance and Security as a pervasive knowledge area. However, introducing security in lower level courses is challenging because of lack of appropriate teaching resources and training. This workshop will provide a well-tested strategy for introducing secure coding concepts in CS0, CS1, and CS2. We will introduce attendees to secure coding through hands-on exercises, and provide self-contained, lab-based modules designed to be injected into CS0-CS2 with minimal impact on the course (www.towson.edu/securityinjections). Participants will be encouraged to bring in their own syllabus and labs to modify to include secure coding concepts. The first 15 participants will be reimbursed for the workshop cost on attendance (through NSF DUE-1241738).  Laptop recommended. </tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>31<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Projects for Computing Summer Camps for 4th-12th grade Students<td  dir='ltr' class='s5'>Barbara Ericson<td  dir='ltr' class='s5'>Ericson@cc.gatech.edu<td  dir='ltr' class='s5'>This workshop will provide details on the projects that we recommend for non-residential computing summer camps for 4th ‚Äì 12th grade students.   Georgia Tech has been offering computing summer camps since 2004.  These camps are financially self-sustaining and effective at improving attitudes towards computing, especially for females and African-American students. Items used in the camps include: CS Unplugged, LightBot, Scratch, Alice, LEGO robots (WeDo, NXT, and Tetrix), EarSketch, and App Inventor.  Georgia Tech has also helped eleven other colleges and universities in Georgia start or expand computing summer camps.  Some of these other institutions also offer camps on GameSalad, GameMaker, and web development.  These other camps also have improved attitudes towards computing.<br/><br/>The workshop will include an overview of the projects that we have found to be successful and hands-on work with App Inventor, GameSalad, LEGO NXT robots, and LEGO EV3 robots. <br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>32<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>SNAP! (Build Your Own Blocks)<td  dir='ltr' class='s5'>Brian Harvey<td  dir='ltr' class='s5'>bh@cs.berkeley.edu<td  dir='ltr' class='s5'>This workshop is for high school and college teachers of general-interest (&quot;CS 0&quot;) computer science courses, especially the AP CS: Principles course.<br/> <br/>SNAP! (Build Your Own Blocks) is a free, browser-based, graphical, drag-and-drop language inspired by Scratch. The beauty of the Scratch programming environment, designed for 8-14 year olds, is that it makes abstract concepts more concrete and understandable to a broader audience.   SNAP! extends Scratch to support older learners (14-20) with built-in named procedures (thus recursion), procedures as data (thus higher order functions), structured lists, and sprites as first class objects with inheritance. <br/><br/>Participants will learn SNAP! hands-on. See http://snap.berkeley.edu for details. Network connected laptop required.<br/></tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>33<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Puzzle-Based Learning: Introducing Creative Thinking and Problem Solving for Computer Science and Engineering<td  dir='ltr' class='s5'>Raja Sooriamurthi<td  dir='ltr' class='s5'>raja@cmu.edu<td  dir='ltr' class='s5'>Puzzle-based learning (PBL) is a new and emerging model of teaching critical thinking and problem solving.  Today‚Äôs market place needs skilled graduates capable of solving real problems of innovation in a changing environment. A learning goal of PBL is to distill domain independent transferable heuristics for tackling problems. While solving puzzles is innately fun, companies such as Google and Yahoo also use puzzles to assess the creative problem solving skills of potential employees.  In this interactive workshop we will examine a range of puzzles and games.  What general problem solving strategies can we learn from the way we solve these examples? Participants will emerge with the needed pedagogical foundation to offer a full course on PBL or to include it as part of another course.</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>34<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Dynamic Program Visualizations for Java<td  dir='ltr' class='s5'>James Cross<td  dir='ltr' class='s5'>crossjh@auburn.edu<td  dir='ltr' class='s5'>This workshop will focus on using the new jGRASP viewer canvas which provides an exciting new dimension to dynamic program visualization.  The canvas allows students and instructors to organize dynamic viewers of multiple objects and primitives to quickly form coherent program visualizations.  Students can quickly build and save visualizations of their own programs, and faculty can create visualizations and provide them to students with example programs.  ‚ÄúPlaying‚Äù a program in canvas mode brings the visualization to life as objects come into scope and the canvas is updated automatically.  jGRASP is a freely available lightweight IDE that provides automatic generation of visualizations that directly support the teaching of major concepts in CS1, CS2, and CS3 (http://www.jgrasp.org/).</tr><tr dir='ltr'><td class=hd><p style='height:16px;'>.</td><td  class='s3'>35<td  dir='ltr' class='s4'>SAT<td  dir='ltr' class='s5'>Mobile Computer Science Principles:  A Professional Development Sampler for Teachers<td  dir='ltr' class='s5'>Ralph Morelli<td  dir='ltr' class='s5'>ralph.morelli@trincoll.edu<td  dir='ltr' class='s5'>The College Board‚Äôs CS Principles (CSP) Project is an effort to develop a language-neutral, breadth-first advanced placement (AP) course in computer science. MobileCSP is an NSF-funded effort to train high school teachers to teach a CSP course that engages students in building mobile apps with App Inventor. The workshop will provide an overview of MobileCSP training including a hands-on introduction to App Inventor and a representative sample of CSP-based lesson plans, assessment materials, and other resources. MobileCSP training will be available for free to all high school teachers in summer 2014 through an online course.  Attendees will be provided information about getting involved in the summer 2014 training.  Target audience: high school teachers.  Laptop required.</tr></table>
</div>
</div>

<?php
 include("../parts/bottom.php");
?>
